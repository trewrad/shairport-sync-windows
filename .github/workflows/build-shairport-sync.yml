name: Build shairport-sync-windows

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: 'START: Checkout repository'
        uses: actions/checkout@v4

      - name: 'START: Add Inno Setup to PATH'
        shell: pwsh
        run: |
          echo "--- Inno Setup is pre-installed. Adding to PATH... ---"
          echo "C:\Program Files (x86)\Inno Setup 6" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "--- Inno Setup PATH set. ---"

      # --- Phase 1: Bonjour SDK Preparation ---
      - name: 'START: Download Bonjour SDK Installer'
        env:
          APPLE_AUTH_COOKIE: ${{ secrets.APPLE_AUTH_COOKIE }}
        shell: pwsh
        run: |
          echo "--- Starting Bonjour SDK Download ---"
          if ([string]::IsNullOrWhiteSpace($env:APPLE_AUTH_COOKIE)) {
            echo "::error::APPLE_AUTH_COOKIE secret is not set or empty."
            exit 1
          }
          $headers = @{
              "Accept" = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
              "Accept-Language" = "en-GB,en-US;q=0.9,en;q=0.8"
              "Cache-Control" = "no-cache"
              "Connection" = "keep-alive"
              "Cookie" = $env:APPLE_AUTH_COOKIE
              "Pragma" = "no-cache"
              "Referer" = "https://developer.apple.com/"
              "Sec-Fetch-Dest" = "document"
              "Sec-Fetch-Mode" = "navigate"
              "Sec-Fetch-Site" = "same-site"
              "Sec-Fetch-User" = "?1"
              "Upgrade-Insecure-Requests" = "1"
              "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36"
              "sec-ch-ua" = "`"Google Chrome`";v=`"141`", `"Not?A_Brand`";v=`"8`", `"Chromium`";v=`"141`""
              "sec-ch-ua-mobile" = "?0"
              "sec-ch-ua-platform" = "`"Windows`""
          }
          try {
            Invoke-WebRequest -Uri "https://download.developer.apple.com/Developer_Tools/bonjour_sdk_for_windows_v3.0/bonjoursdksetup.exe" -Headers $headers -OutFile "bonjoursdksetup.exe" -ErrorAction Stop
            echo "Bonjour SDK downloaded successfully."
          } catch {
            echo "::error::Failed to download Bonjour SDK. Error: $($_.Exception.Message)"
            exit 1
          }

      - name: 'STEP: Extract Bonjour MSIs'
        shell: pwsh
        run: |
          echo "Extracting Bonjour MSIs using 7-Zip..."
          & "C:\Program Files\7-Zip\7z.exe" x bonjoursdksetup.exe -o"." Bonjour64.msi BonjourSDK64.msi -y
          if ($LASTEXITCODE -ne 0) {
            echo "::error::Failed to extract MSIs from bonjoursdksetup.exe"
            exit 1
          }
          echo "MSIs extracted."
          Remove-Item -Path "bonjoursdksetup.exe" -Force

      - name: 'STEP: Install Bonjour Runtime (64-bit)'
        shell: pwsh
        run: |
          echo "Installing Bonjour Runtime (Bonjour64.msi) silently with verbose logging..."
          $msiPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "Bonjour64.msi"
          $logPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "bonjour64_install.log"
          $arguments = "/i `"$msiPath`" /qn /norestart /L*v `"$logPath`""
          $process = Start-Process msiexec -ArgumentList $arguments -Wait -PassThru
          if ($process.ExitCode -ne 0 -and $process.ExitCode -ne 3010) { # 3010 = Success, Reboot Required
            echo "::error::Bonjour Runtime (Bonjour64.msi) installation failed with exit code $($process.ExitCode)."
            if (Test-Path $logPath) {
              echo "--- Start Bonjour Runtime Install Log ---"
              Get-Content $logPath | ForEach-Object { echo $_ }
              echo "--- End Bonjour Runtime Install Log ---"
            }
            exit 1
          }
          echo "Bonjour Runtime installation completed (Exit Code: $($process.ExitCode)). Log: $logPath"

      - name: 'STEP: Install Bonjour SDK (64-bit)'
        shell: pwsh
        run: |
          echo "Installing Bonjour SDK (BonjourSDK64.msi) silently with verbose logging..."
          $msiPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "BonjourSDK64.msi"
          $logPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "bonjoursdk64_install.log"
          $arguments = "/i `"$msiPath`" /qn /norestart /L*v `"$logPath`""
          $process = Start-Process msiexec -ArgumentList $arguments -Wait -PassThru
          if ($process.ExitCode -ne 0 -and $process.ExitCode -ne 3010) { # 3010 = Success, Reboot Required
            echo "::error::Bonjour SDK (BonjourSDK64.msi) installation failed with exit code $($process.ExitCode)."
            if (Test-Path $logPath) {
              echo "--- Start Bonjour SDK Install Log ---"
              Get-Content $logPath | ForEach-Object { echo $_ }
              echo "--- End Bonjour SDK Install Log ---"
            }
            exit 1
          }
          echo "Bonjour SDK installation completed (Exit Code: $($process.ExitCode)). Log: $logPath"

      - name: 'START: Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          # FIX IMPLEMENTED HERE: Removed the problematic comment
          install: >-
            git
            base-devel
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-autotools
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-libconfig
            mingw-w64-x86_64-popt
            mingw-w64-x86_64-openssl
            mingw-w64-x86_64-libsoxr
            mingw-w64-x86_64-libao
          # -----------------------------------------------

      # --- Phase 1: Core Program Compilation ---
      - name: 'RUN: Compile shairport-sync'
        shell: msys2 {0}
        run: |
          set -eo pipefail

          echo "--- (2) Cloning shairport-sync repository ---"
          git clone https://github.com/mikebrady/shairport-sync.git ../shairport-sync-source
          cd ../shairport-sync-source

          echo "--- (3) Running autoreconf ---"
          autoreconf -fi

          echo "--- (4) Configuring shairport-sync build ---"
          PKG_CONFIG_PATH=/mingw64/lib/pkgconfig \
          CPPFLAGS="-I'/c/Program Files/Bonjour SDK/Include'" \
          LDFLAGS="-L'/c/Program Files/Bonjour SDK/Lib/amd64'" \
          ./configure --prefix=/mingw64 \
          --with-ssl=openssl \
          --with-ao \
          --with-soxr \
          --with-dns_sd \
          --without-avahi \
          --without-tinysvcmdns \
          --without-systemd \
          --without-alsa \
          --without-pulse \
          --without-libdaemon || { echo "::error::Configure script failed"; exit 1; }

          echo "--- (5) Compiling shairport-sync.exe ---"
          make || { echo "::error::Make failed"; exit 1; }

          echo "--- (6) Installing to /mingw64/bin ---"
          make install || { echo "::error::Make install failed"; exit 1; }

          echo "--- Shairport-sync build complete ---"

      - name: 'START: Prune compilation artifact directory'
        shell: pwsh
        run: |
          echo "--- Starting artifact pruning ---"
          $dllListPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "dll-libs-list.txt"
          if (-not (Test-Path -Path $dllListPath -PathType Leaf)) {
            echo "::error::$dllListPath not found or is not a file!"
            exit 1
          }
          $dllList = Get-Content -Path $dllListPath
          $msysBinPath = "$env:GITHUB_WORKSPACE\msys64\mingw64\bin"
          $destPath = "$env:GITHUB_WORKSPACE\build"

          New-Item -ItemType Directory -Force -Path $destPath
          echo "Created/Ensured build directory exists at $destPath"

          $shairportExeSource = Join-Path $msysBinPath "shairport-sync.exe"
          if (Test-Path $shairportExeSource) {
            echo "Copying shairport-sync.exe to $destPath"
            Copy-Item -Path $shairportExeSource -Destination $destPath
          } else {
             echo "::error::shairport-sync.exe not found in $msysBinPath after build!"
             exit 1
          }

          foreach ($file in $dllList) {
            $trimmedFile = $file.Trim()
            if ([string]::IsNullOrWhiteSpace($trimmedFile) -or $trimmedFile.StartsWith("#")) {
              continue
            }
            $sourceFile = Join-Path $msysBinPath $trimmedFile
            if (Test-Path $sourceFile) {
              echo "Copying $($trimmedFile) to $destPath"
              Copy-Item -Path $sourceFile -Destination $destPath
            } else {
              echo "::error::Required dependency DLL '$trimmedFile' not found in $msysBinPath"
              exit 1
            }
          }
          echo "--- Artifact pruning complete ---"

      # --- Phase 2: Python Tray Wrapper ---
      - name: 'START: Set up Python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 'START: Install Python dependencies'
        run: |
          echo "--- Installing PyInstaller, pystray, and pillow... ---"
          pip install pyinstaller pystray pillow
          echo "--- Python dependencies installed ---"

      - name: 'START: Build the Python wrapper'
        run: |
          echo "--- Running PyInstaller... ---"
          pyinstaller --onefile --windowed --name shairport-sync-windows tray/tray.py || { echo "::error::PyInstaller failed"; exit 1; }
          echo "--- PyInstaller build complete ---"
          echo "Copying Python wrapper executable to build directory..."
          Copy-Item -Path "dist/shairport-sync-windows.exe" -Destination "$env:GITHUB_WORKSPACE\build\"

      # --- Phase 3: Inno Setup Installer ---
      - name: 'START: Compile the installer with Inno Setup'
        shell: pwsh
        run: |
          echo "--- Running Inno Setup Compiler (iscc)... ---"
          iscc "inno-setup/script.iss" || { echo "::error::Inno Setup compilation failed"; exit 1; }
          echo "--- Inno Setup compilation complete ---"

      # --- Upload Artifact ---
      - name: 'START: Upload artifact'
        uses: actions/upload-artifact@v4
        with:
          name: shairport-sync-windows
          path: inno-setup/Output/shairport-sync-windows-setup.exe
